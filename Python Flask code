from flask import Flask, request, jsonify
import mysql.connector

app = Flask(__name__)

# ---------------------------
# Database connection
# ---------------------------
db = mysql.connector.connect(
    host="localhost",
    user="root",        # change if needed
    password="1234", # change to your MySQL password
    database="campusdb"
)
cursor = db.cursor(dictionary=True)

# ---------------------------
# Helper function
# ---------------------------
def execute_query(query, params=None, fetch=False):
    cursor.execute(query, params or ())
    if fetch:
        result = cursor.fetchall()
        return result
    else:
        db.commit()
        return None

# ---------------------------
# Routes
# ---------------------------

@app.route('/')
def home():
    return "Campus Event Management API is running"

# Add Student
@app.route('/students', methods=['POST'])
def add_student():
    data = request.json
    query = "INSERT INTO Students (name, email, college_id) VALUES (%s, %s, %s)"
    execute_query(query, (data['name'], data['email'], data['college_id']))
    return jsonify({"message": "Student added successfully"})

# Create Event
@app.route('/events', methods=['POST'])
def create_event():
    data = request.json
    query = "INSERT INTO Events (event_name, event_type, event_date, college_id) VALUES (%s, %s, %s, %s)"
    execute_query(query, (data['event_name'], data['event_type'], data['event_date'], data['college_id']))
    return jsonify({"message": "Event created successfully"})

# Register Student
@app.route('/register', methods=['POST'])
def register_student():
    data = request.json
    query = "INSERT IGNORE INTO Registrations (student_id, event_id) VALUES (%s, %s)"
    execute_query(query, (data['student_id'], data['event_id']))
    return jsonify({"message": "Student registered for event"})

# Mark Attendance
@app.route('/attendance', methods=['POST'])
def mark_attendance():
    data = request.json
    query = "INSERT INTO Attendance (student_id, event_id, status) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE status=%s"
    execute_query(query, (data['student_id'], data['event_id'], data['status'], data['status']))
    return jsonify({"message": "Attendance recorded"})

# Submit Feedback
@app.route('/feedback', methods=['POST'])
def submit_feedback():
    data = request.json
    query = "INSERT INTO Feedback (student_id, event_id, rating, comments) VALUES (%s, %s, %s, %s) ON DUPLICATE KEY UPDATE rating=%s, comments=%s"
    execute_query(query, (data['student_id'], data['event_id'], data['rating'], data.get('comments', ''), data['rating'], data.get('comments', '')))
    return jsonify({"message": "Feedback submitted"})

# ---------------------------
# Reports
# ---------------------------

# Event Popularity (registrations count)
@app.route('/reports/popularity', methods=['GET'])
def event_popularity():
    query = """
    SELECT e.event_id, e.event_name, COUNT(r.reg_id) AS total_registrations
    FROM Events e
    LEFT JOIN Registrations r ON e.event_id = r.event_id
    GROUP BY e.event_id, e.event_name
    ORDER BY total_registrations DESC
    """
    result = execute_query(query, fetch=True)
    return jsonify(result)

# Student Participation
@app.route('/reports/participation', methods=['GET'])
def student_participation():
    query = """
    SELECT s.student_id, s.name, COUNT(a.attendance_id) AS events_attended
    FROM Students s
    LEFT JOIN Attendance a ON s.student_id = a.student_id AND a.status='Present'
    GROUP BY s.student_id, s.name
    ORDER BY events_attended DESC
    """
    result = execute_query(query, fetch=True)
    return jsonify(result)

# Top 3 Active Students
@app.route('/reports/top-students', methods=['GET'])
def top_students():
    query = """
    SELECT s.student_id, s.name, COUNT(a.attendance_id) AS events_attended
    FROM Students s
    LEFT JOIN Attendance a ON s.student_id = a.student_id AND a.status='Present'
    GROUP BY s.student_id, s.name
    ORDER BY events_attended DESC
    LIMIT 3
    """
    result = execute_query(query, fetch=True)
    return jsonify(result)

# Attendance Percentage per Event
@app.route('/reports/attendance', methods=['GET'])
def attendance_percentage():
    query = """
    SELECT e.event_id, e.event_name,
           COUNT(r.reg_id) AS total_registrations,
           SUM(CASE WHEN a.status='Present' THEN 1 ELSE 0 END) AS present_count,
           ROUND((SUM(CASE WHEN a.status='Present' THEN 1 ELSE 0 END) / NULLIF(COUNT(r.reg_id),0)) * 100, 2) AS attendance_percentage
    FROM Events e
    LEFT JOIN Registrations r ON e.event_id = r.event_id
    LEFT JOIN Attendance a ON r.student_id = a.student_id AND r.event_id = a.event_id
    GROUP BY e.event_id, e.event_name
    """
    result = execute_query(query, fetch=True)
    return jsonify(result)

# Average Feedback Score per Event
@app.route('/reports/feedback', methods=['GET'])
def average_feedback():
    query = """
    SELECT e.event_id, e.event_name,
           ROUND(AVG(f.rating), 2) AS avg_feedback
    FROM Events e
    LEFT JOIN Feedback f ON e.event_id = f.event_id
    GROUP BY e.event_id, e.event_name
    """
    result = execute_query(query, fetch=True)
    return jsonify(result)

# ---------------------------
# Run Server
# ---------------------------
if __name__ == "__main__":
    app.run(debug=True)
